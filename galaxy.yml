# See https://docs.ansible.com/ansible/latest/dev_guide/collections_galaxy_meta.html

namespace: cisco
name: catalystwan
version: 0.1.0
readme: README.md
authors:
  - Arkadiusz Cichon <acichon@cisco.com>
  - Kamil GÃ³rski <kagorski@cisco.com>
description: Ansible collection to interact with Cisco SD-WAN vManage via catalystwan

# The URL of the originating SCM repository
repository: git@github.com:cisco-open/ansible-collection-catalystwan.git

# The URL to any online docs
documentation: https://github.com/cisco-open/ansible-collection-catalystwan/blob/main/README.md

# The URL to the homepage of the collection/project
homepage: http://cisco.com

# Either a single license or a list of licenses for content inside of a collection. Ansible Galaxy currently only
# accepts L(SPDX,https://spdx.org/licenses/) licenses. This key is mutually exclusive with 'license_file'
license:
  - "GPL-3.0-only"


# The path to the license file for the collection. This path is relative to the root of the collection. This key is
# mutually exclusive with 'license'
# license_file:

# A list of tags you want to associate with the collection for indexing/searching. A tag name has the same character
# requirements as 'namespace' and 'name'
tags:
  - demo
  - collection
  - cloud
  - infrastructure

# Collections that this collection requires to be installed for it to be usable. The key of the dict is the
# collection label 'namespace.name'. The value is a version range
# L(specifiers,https://python-semanticversion.readthedocs.io/en/latest/#requirement-specification). Multiple version
# range specifiers can be set and are separated by ','
dependencies: {}

# The URL to the collection issue tracker
issues: http://example.com/issue/tracker

# A list of file glob-like patterns used to filter any files or directories that should not be included in the build
# artifact. A pattern is matched from the relative path of the file or directory of the collection directory. This
# uses 'fnmatch' to match the files or directories. Some directories and files like 'galaxy.yml', '*.pyc', '*.retry',
# and '.git' are always filtered. Mutually exclusive with 'manifest'
build_ignore: []

# A dict controlling use of manifest directives used in building the collection artifact. The key 'directives' is a
# list of MANIFEST.in style
# L(directives,https://packaging.python.org/en/latest/guides/using-manifest-in/#manifest-in-commands). The key
# 'omit_default_directives' is a boolean that controls whether the default directives are used. Mutually exclusive
# with 'build_ignore'
# manifest: null
