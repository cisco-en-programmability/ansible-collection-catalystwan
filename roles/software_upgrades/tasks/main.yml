# Copyright 2024 Cisco Systems, Inc. and its affiliates
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

---

# This role provides full workflow for upgrading devices with Remote Server.
# It assumes that controllers are <20.13 version
# Currently doesn't include upgrades of cEdges from Remote Server. Known bug on vManage.

- name: "Verify required variables for selected role"
  ansible.builtin.include_tasks: variables_assertion.yml

- name: Set variables
  ansible.builtin.set_fact:
    upgrade_from_remote_server: "{{ remote_server_name is defined }}"

# --- Upload images from local machine or remote server --- #
- name: "Upload images from {{ upload_method }}"
  ansible.builtin.include_tasks:
    file: "{{ upload_method }}.yml"
  vars:
    upload_method: "{{ upgrade_from_remote_server | ternary('upload_from_remote_server', 'upload_directly_to_manager') }}"


# --- Upgrade operations on controllers --- #


# --- vManage software upgrades --- #

- name: "Install software on vManage, image: {{ vmanage_remote_software_filename | basename }}"
  cisco.catalystwan.software_upgrade:
    state: "present"
    reboot: false
    image_path: "{{ omit if upgrade_from_remote_server else vmanage_remote_software_filename }}"
    remote_server_name: "{{ remote_server_name if upgrade_from_remote_server else omit }}"
    remote_image_filename: "{{ remote_server_image_location_prefix ~ vmanage_remote_software_filename if upgrade_from_remote_server else omit }}"
    downgrade_check: false
    wait_for_completed: true
    wait_timeout_seconds: 3600
    filters:
      personality: "vmanage"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"

# FIXME image_path doesn't work because Remote images don't include version_name in repository
- name: |
    Activate software (include reboot) on vManage from software: {{ vmanage_remote_software_filename | basename }}
    Version to activate: {{ controller_software_version_to_activate }}
  cisco.catalystwan.software_upgrade:
    state: "active"
    image_path: "{{ omit if upgrade_from_remote_server else vmanage_remote_software_filename | basename }}"
    image_version: "{{ controller_software_version_to_activate if upgrade_from_remote_server else omit }}"
    wait_timeout_seconds: 3600
    filters:
      personality: "vmanage"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"

- name: "Set default software version from current version on vManage"
  cisco.catalystwan.software_upgrade:
    state: "default"
    image_version: "current"
    filters:
      personality: "vmanage"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"

- name: "Get details of software info - filter vManage"
  cisco.catalystwan.software_upgrade_info:
    device_type: "vmanage"
    filters:
      personality: "vmanage"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"
  register: software_info_vmanage

- name: "Delete available software from vManage"
  cisco.catalystwan.software_upgrade:
    state: "absent"
    image_version: "{{ version_item }}"
    filters:
      personality: "vmanage"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"
  loop: "{{ software_info_vmanage.installed_devices | map(attribute='available_versions') | first }}"
  loop_control:
    loop_var: version_item
  when:
    - remove_available_software_from_device | default('false') | bool
    - software_info_vmanage.installed_devices | map(attribute='available_versions') | length > 0

- name: "Verify that activated version appears as current version and as default version"
  ansible.builtin.assert:
    that:
      - "controller_software_version_to_activate in (software_info_vmanage.installed_devices | first).current_partition"
      - "controller_software_version_to_activate in (software_info_vmanage.installed_devices | first).default_version"
    fail_msg: "{{ software_info_vmanage.installed_devices | first | to_nice_yaml }}"
    success_msg: "{{ software_info_vmanage.installed_devices | first | to_nice_yaml }}"


# --- vBond software upgrades --- #


- name: "Install and activate software operation on vBond, image: {{ viptela_remote_software_filename | basename }}"
  cisco.catalystwan.software_upgrade:
    state: "present"  # present with reboot: true -> ACTIVE in vManage
    reboot: true
    image_path: "{{ omit if upgrade_from_remote_server else viptela_remote_software_filename }}"
    remote_server_name: "{{ remote_server_name if upgrade_from_remote_server else omit }}"
    remote_image_filename: "{{ remote_server_image_location_prefix ~ viptela_remote_software_filename if upgrade_from_remote_server else omit }}"
    wait_for_completed: true
    wait_timeout_seconds: 3600
    downgrade_check: false
    filters:
      personality: "vbond"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"

- name: "Set default software version from current version on vBond"
  cisco.catalystwan.software_upgrade:
    state: "default"
    image_version: "current"
    filters:
      personality: "vbond"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"

- name: "Get details of software info - filter vBond"
  cisco.catalystwan.software_upgrade_info:
    device_type: "controller"
    filters:
      personality: "vbond"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"
  register: software_info_vbond

- name: "Delete available software from vBond"
  cisco.catalystwan.software_upgrade:
    state: "absent"
    image_version: "{{ version_item }}"
    filters:
      personality: "vbond"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"
  loop: "{{ software_info_vbond.installed_devices | map(attribute='available_versions') | first }}"
  loop_control:
    loop_var: version_item
  when:
    - remove_available_software_from_device | default('false') | bool
    - software_info_vbond.installed_devices | map(attribute='available_versions') | length > 0

- name: "Verify that activated version appears as current version and as default version"
  ansible.builtin.assert:
    that:
      - "controller_software_version_to_activate in device_item.current_partition"
      - "controller_software_version_to_activate in device_item.default_version"
    fail_msg: "{{ device_item | to_nice_yaml }}"
    success_msg: "{{ device_item | to_nice_yaml }}"
  loop: "{{ software_info_vbond.installed_devices }}"
  loop_control:
    loop_var: device_item

# --- vSmart software upgrades --- #


- name: "Install and activate software operation on vSmart, image: {{ viptela_remote_software_filename | basename }}"
  cisco.catalystwan.software_upgrade:
    state: "present"  # present with reboot: true -> ACTIVE in vManage
    reboot: true
    image_path: "{{ omit if upgrade_from_remote_server else viptela_remote_software_filename }}"
    remote_server_name: "{{ remote_server_name if upgrade_from_remote_server else omit }}"
    remote_image_filename: "{{ remote_server_image_location_prefix ~ viptela_remote_software_filename if upgrade_from_remote_server else omit }}"
    wait_for_completed: true
    wait_timeout_seconds: 3600
    downgrade_check: false
    filters:
      personality: "vsmart"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"

- name: "Set default software version from current version on vSmart"
  cisco.catalystwan.software_upgrade:
    state: "default"
    image_version: "current"
    filters:
      personality: "vsmart"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"

- name: "Get details of software info - filter vSmart"
  cisco.catalystwan.software_upgrade_info:
    device_type: "controller"
    filters:
      personality: "vsmart"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"
  register: software_info_vsmart

- name: "Delete available software from vSmart"
  cisco.catalystwan.software_upgrade:
    state: "absent"
    image_version: "{{ version_item }}"
    filters:
      personality: "vsmart"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"
  loop: "{{ software_info_vsmart.installed_devices | map(attribute='available_versions') | first }}"
  loop_control:
    loop_var: version_item
  when:
    - remove_available_software_from_device | default('false') | bool
    - software_info_vsmart.installed_devices | map(attribute='available_versions') | length > 0

- name: "Verify that activated version appears as current version and as default version"
  ansible.builtin.assert:
    that:
      - "controller_software_version_to_activate in device_item.current_partition"
      - "controller_software_version_to_activate in device_item.default_version"
    fail_msg: "{{ device_item | to_nice_yaml }}"
    success_msg: "{{ device_item | to_nice_yaml }}"
  loop: "{{ software_info_vsmart.installed_devices }}"
  loop_control:
    loop_var: device_item

# --- Edge software upgrades --- #

- name: "Install and activate software operation on cEdges, image: {{ cedge_remote_software_filename | basename }}"
  cisco.catalystwan.software_upgrade:
    state: "present"  # present with reboot: true -> ACTIVATE in vManage
    reboot: true
    image_path: "{{ omit if upgrade_from_remote_server else cedge_remote_software_filename }}"
    remote_server_name: "{{ remote_server_name~'-edge' if upgrade_from_remote_server else omit }}"
    remote_image_filename: "{{ remote_server_image_location_prefix ~ cedge_remote_software_filename if upgrade_from_remote_server else omit }}"
    wait_for_completed: true
    downgrade_check: false
    filters:
      personality: "vedge"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"

- name: "Set default software version from current version on cEdges"
  cisco.catalystwan.software_upgrade:
    state: "default"
    image_version: "current"
    filters:
      personality: "vedge"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"

- name: "Get details of software installed on edge components - filter cEdges"
  cisco.catalystwan.software_upgrade_info:
    device_type: "vedge"
    filters:
      personality: "vedge"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"
  register: software_info_cedges

- name: "Delete available software from Edge"
  cisco.catalystwan.software_upgrade:
    state: "absent"
    image_version: "{{ version_item }}"
    filters:
      personality: "vedge"
    manager_authentication:
      url: "{{ (vmanage_instances | first).mgmt_public_ip }}"
      username: "{{ (vmanage_instances | first).admin_username }}"
      password: "{{ (vmanage_instances | first).admin_password }}"
  loop: "{{ software_info_cedges.installed_devices | map(attribute='available_versions') | first }}"
  loop_control:
    loop_var: version_item
  when:
    - remove_available_software_from_device | default('false') | bool
    - software_info_cedges.installed_devices | map(attribute='available_versions') | length > 0


- name: "Verify that activated version appears as current version and as default version"
  ansible.builtin.assert:
    that:
      - "edge_software_version_to_activate in device_item.current_partition"
      - "edge_software_version_to_activate in device_item.default_version"
    fail_msg: "{{ device_item | to_nice_yaml }}"
    success_msg: "{{ device_item | to_nice_yaml }}"
  loop: "{{ software_info_cedges.installed_devices }}"
  loop_control:
    loop_var: device_item
